#!/usr/bin/env sh

##############
## Heredocs ##
##############

usage() {
  cat <<EOF
Print the information on a eks node as JSON

Usage:
  eks-node <nodename>
  eks-node <filter-type> <value>

Filter types:
  - avaliability_zone(az)
  - instance_type(ins)
  - nodegroup(ng)

Examples:
  # Print the information on a eks node as JSON
  $ kubectl eks-node ip-172-16-200-10.your.domain
  {
    "ip-172-16-200-10.your.domain": {
      "nodegroup": "awsomenode",
      "instance_type": "t3.small",
      "zone": "ap-northeast-2a"
    }
  }

  # Or filter nodes by an availability zone
  $ k eks-node az ap-northeast-2a
  NAME                           STATUS   ROLES    AGE    VERSION
  ip-172-16-200-10.your.domain   Ready    <none>   3d4h   v1.23.9-eks-ba74326
  ip-172-16-200-11.your.domain   Ready    <none>   4h2m   v1.23.9-eks-ba74326

  # By an instance type
  $ k eks-node ins t3.large
  NAME                           STATUS   ROLES    AGE    VERSION
  ip-172-16-200-10.your.domain   Ready    <none>   3d4h   v1.23.9-eks-ba74326
  ip-172-16-201-10.your.domain   Ready    <none>   16d    v1.23.9-eks-ba74326
  ip-172-16-202-10.your.domain   Ready    <none>   80m    v1.23.9-eks-ba74326
  ip-172-16-200-12.your.domain   Ready    <none>   5d7h   v1.23.9-eks-ba74326
  ip-172-16-201-11.your.domain   Ready    <none>   3d4h   v1.23.9-eks-ba74326

  # Or by a nodegroup
  $ k eks-node ng awsomenode
  NAME                           STATUS   ROLES    AGE    VERSION
  ip-172-16-200-10.your.domain   Ready    <none>   3d4h   v1.23.9-eks-ba74326
EOF
}

yq_missing() {
  cat <<EOF
You must install yq to use this plugin:

    https://github.com/mikefarah/yq#install

INSTALLATION

Homebrew (macOS) and Linuxbrew (Linux):

    brew install yq
EOF
}

invaild_nodename_pattern() {
  nodename=$1
  nodename_pattern=$2

  cat <<EOF
'$nodename' should match to the following node name pattern:
/$2/
EOF
}

##############
## Commands ##
##############

nodeinfo() {
  # Early return if yq is not installed
  command -v > /dev/null || { yq_mssing; exit 1; }

  nodename_pattern='ip-[0-9]{1,3}-[0-9]{1,3}-[0-9]{1,3}-[0-9]{1,3}(\.\w+)+'
  nodename=$1

  echo "$nodename" | grep -Eq "$nodename_pattern" \
    || { invaild_nodename_pattern "$nodename", "$nodename_pattern"; }

  tempfile=$(mktemp)

  kubectl get node "$nodename" -oyaml > "$tempfile" && \
    nodename=$nodename yq -ojson '.metadata.labels |
      {
        env(nodename): {
          "nodegroup": ."eks.amazonaws.com/nodegroup",
          "instance_type": ."beta.kubernetes.io/instance-type",
          "zone": ."topology.kubernetes.io/zone"
        }
      }' "$tempfile"

  rm "$tempfile"
}

nodeselector() {
  key=$1
  value=$2

  case $key in
    az | availablity_zone)
      label_selector="topology.kubernetes.io/zone=$value"
      ;;
    ins | instance_type)
      label_selector="beta.kubernetes.io/instance-type=$value"
      ;;
    ng | nodegroup)
      label_selector="eks.amazonaws.com/nodegroup=$value"
      ;;
    *)
      usage
      exit 1
  esac

  kubectl get node -l "$label_selector"
}


##########
## Main ##
##########

if [ "$#" -eq 1 ]; then
  nodeinfo "$1"
elif [ "$#" -eq 2 ]; then
  nodeselector "$1" "$2"
else
  usage
fi
